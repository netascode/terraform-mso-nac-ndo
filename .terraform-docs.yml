version: ">= 0.14.0"

formatter: markdown table

content: |-
  [![Tests](https://github.com/netascode/terraform-mso-nac-ndo/actions/workflows/test.yml/badge.svg)](https://github.com/netascode/terraform-mso-nac-ndo/actions/workflows/test.yml)

  # Terraform NDO Network-as-Code Module

  A Terraform module to configure Nexus Dashboard Orchestrator (NDO).

  This module is part of the Cisco [*Network-as-Code*](https://netascode.cisco.com) project. Its goal is to allow users to instantiate network fabrics in minutes using an easy to use, opinionated data model. It takes away the complexity of having to deal with references, dependencies or loops. By completely separating data (defining variables) from logic (infrastructure declaration), it allows the user to focus on describing the intended configuration while using a set of maintained and tested Terraform Modules without the need to understand the low-level ACI object model. More information can be found here: https://netascode.cisco.com.

  ## Usage

  This module supports an inventory driven approach, where a complete NDO configuration or parts of it are either modeled in one or more YAML files or natively using Terraform variables.

  There are six configuration sections which can be selectively enabled or disabled using module flags:

  - `system`: Manage system level configuration like banners
  - `sites`: Enable sites in NDO
  - `site_connectivity`: Manage Multi-Site connectivity configuration
  - `tenants`: Configure tenants using NDO
  - `schemas`: Configurations applied at the schema and template level (e.g., VRFs and Bridge Domains)
  - `deploy_templates`: Automatically deploy templates

  The full data model documentation is available here: https://netascode.cisco.com/data_model/overview

  ## Examples

  Configuring a Tenant using YAML:

  #### `ndo.yaml`

  ```hcl
  {{ include "./examples/tenant_yaml/ndo.yaml" }}
  ```

  #### `main.tf`

  ```hcl
  {{ include "./examples/tenant_yaml/main.tf" }}
  ```

  Configuring a Site using native HCL:

  #### `main.tf`

  ```hcl
  {{ include "./examples/site_hcl/main.tf" }}
  ```

  ## Issues

  Depending on the exact configuration, there might be issues with the NDO API returning errors due to concurrent operations. In this case one can use the `parallelism=1` command line attribute to ensure all resource operations are executed in sequence.

  ```shell
  $ terraform apply -parallelism=1
  ```

  Alternatively, an environment variable can be used as well.

  ```shell
  $ export TF_CLI_ARGS_apply="-parallelism=1"
  ```

  {{ .Requirements }}

  {{ .Inputs }}

  {{ .Outputs }}

  {{ .Providers }}

  {{ .Resources }}

  {{ .Modules }}

output:
  file: README.md
  mode: replace

sort:
  enabled: true
  by: required
